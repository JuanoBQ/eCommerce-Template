# Generated by Django 4.2.7 on 2025-09-02 01:22

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('categories', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('short_description', models.TextField(blank=True, max_length=500, verbose_name='short description')),
                ('sku', models.CharField(max_length=100, unique=True, verbose_name='SKU')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='price')),
                ('compare_price', models.DecimalField(blank=True, decimal_places=2, help_text='Precio original para mostrar descuentos', max_digits=10, null=True, verbose_name='compare price')),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Precio de costo para calcular márgenes', max_digits=10, null=True, verbose_name='cost price')),
                ('track_inventory', models.BooleanField(default=True, verbose_name='track inventory')),
                ('inventory_quantity', models.PositiveIntegerField(default=0, verbose_name='inventory quantity')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, verbose_name='low stock threshold')),
                ('allow_backorder', models.BooleanField(default=False, verbose_name='allow backorder')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20, verbose_name='status')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('is_digital', models.BooleanField(default=False, verbose_name='is digital')),
                ('requires_shipping', models.BooleanField(default=True, verbose_name='requires shipping')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Peso en kg', max_digits=8, null=True, verbose_name='weight')),
                ('meta_title', models.CharField(blank=True, max_length=200, verbose_name='meta title')),
                ('meta_description', models.TextField(blank=True, verbose_name='meta description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='published at')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='categories.brand', verbose_name='brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='categories.category', verbose_name='category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=60, unique=True, verbose_name='slug')),
                ('color', models.CharField(default='#000000', max_length=7, verbose_name='color')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Product Tag',
                'verbose_name_plural': 'Product Tags',
                'db_table': 'product_tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/', verbose_name='image')),
                ('alt_text', models.CharField(blank=True, max_length=200, verbose_name='alt text')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='sort order')),
                ('is_primary', models.BooleanField(default=False, verbose_name='is primary')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'db_table': 'product_images',
                'ordering': ['sort_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(max_length=100, unique=True, verbose_name='SKU')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Precio específico de la variante. Si está vacío, usa el precio del producto.', max_digits=10, null=True, verbose_name='price')),
                ('compare_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='compare price')),
                ('inventory_quantity', models.PositiveIntegerField(default=0, verbose_name='inventory quantity')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, verbose_name='low stock threshold')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='weight')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('color', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='categories.color', verbose_name='color')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product', verbose_name='product')),
                ('size', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='categories.size', verbose_name='size')),
            ],
            options={
                'verbose_name': 'Product Variant',
                'verbose_name_plural': 'Product Variants',
                'db_table': 'product_variants',
                'unique_together': {('product', 'size', 'color')},
            },
        ),
        migrations.CreateModel(
            name='ProductTagRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.producttag')),
            ],
            options={
                'verbose_name': 'Product Tag Relation',
                'verbose_name_plural': 'Product Tag Relations',
                'db_table': 'product_tag_relations',
                'unique_together': {('product', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='rating')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('comment', models.TextField(verbose_name='comment')),
                ('is_verified_purchase', models.BooleanField(default=False, verbose_name='is verified purchase')),
                ('is_approved', models.BooleanField(default=True, verbose_name='is approved')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product', verbose_name='product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'db_table': 'product_reviews',
                'ordering': ['-created_at'],
                'unique_together': {('product', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'is_featured'], name='products_status_a6991e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'status'], name='products_categor_29e98f_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['brand', 'status'], name='products_brand_i_ed9831_idx'),
        ),
    ]
