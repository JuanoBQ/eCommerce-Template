from django.db import models
from django.utils.translation import gettext_lazy as _
from decimal import Decimal


class SalesReport(models.Model):
    """
    Reporte de ventas por período.
    """
    REPORT_TYPES = [
        ('daily', _('Daily')),
        ('weekly', _('Weekly')),
        ('monthly', _('Monthly')),
        ('yearly', _('Yearly')),
        ('custom', _('Custom')),
    ]
    
    # Información del reporte
    name = models.CharField(_('name'), max_length=200)
    type = models.CharField(_('type'), max_length=20, choices=REPORT_TYPES)
    start_date = models.DateField(_('start date'))
    end_date = models.DateField(_('end date'))
    
    # Métricas de ventas
    total_orders = models.PositiveIntegerField(_('total orders'), default=0)
    total_revenue = models.DecimalField(_('total revenue'), max_digits=12, decimal_places=2, default=0)
    total_products_sold = models.PositiveIntegerField(_('total products sold'), default=0)
    average_order_value = models.DecimalField(_('average order value'), max_digits=10, decimal_places=2, default=0)
    
    # Métricas de conversión
    conversion_rate = models.DecimalField(_('conversion rate'), max_digits=5, decimal_places=2, default=0)
    cart_abandonment_rate = models.DecimalField(_('cart abandonment rate'), max_digits=5, decimal_places=2, default=0)
    
    # Métricas de clientes
    new_customers = models.PositiveIntegerField(_('new customers'), default=0)
    returning_customers = models.PositiveIntegerField(_('returning customers'), default=0)
    customer_retention_rate = models.DecimalField(_('customer retention rate'), max_digits=5, decimal_places=2, default=0)
    
    # Métricas de productos
    top_selling_product = models.ForeignKey(
        'products.Product',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='top_selling_reports',
        verbose_name=_('top selling product')
    )
    top_selling_category = models.ForeignKey(
        'categories.Category',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='top_selling_reports',
        verbose_name=_('top selling category')
    )
    
    # Configuración
    is_automated = models.BooleanField(_('is automated'), default=False)
    generated_by = models.ForeignKey(
        'users.User',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_('generated by')
    )
    
    # Timestamps
    created_at = models.DateTimeField(_('created at'), auto_now_add=True)
    updated_at = models.DateTimeField(_('updated at'), auto_now=True)
    
    class Meta:
        verbose_name = _('Sales Report')
        verbose_name_plural = _('Sales Reports')
        db_table = 'sales_reports'
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.name} ({self.start_date} - {self.end_date})"


class ProductAnalytics(models.Model):
    """
    Analytics de productos.
    """
    product = models.OneToOneField(
        'products.Product',
        on_delete=models.CASCADE,
        related_name='analytics',
        verbose_name=_('product')
    )
    
    # Métricas de visualización
    total_views = models.PositiveIntegerField(_('total views'), default=0)
    unique_views = models.PositiveIntegerField(_('unique views'), default=0)
    
    # Métricas de conversión
    add_to_cart_count = models.PositiveIntegerField(_('add to cart count'), default=0)
    purchase_count = models.PositiveIntegerField(_('purchase count'), default=0)
    conversion_rate = models.DecimalField(_('conversion rate'), max_digits=5, decimal_places=2, default=0)
    
    # Métricas de ventas
    total_sales = models.DecimalField(_('total sales'), max_digits=12, decimal_places=2, default=0)
    total_quantity_sold = models.PositiveIntegerField(_('total quantity sold'), default=0)
    
    # Métricas de satisfacción
    average_rating = models.DecimalField(_('average rating'), max_digits=3, decimal_places=2, default=0)
    total_reviews = models.PositiveIntegerField(_('total reviews'), default=0)
    
    # Métricas de inventario
    stock_turnover_rate = models.DecimalField(_('stock turnover rate'), max_digits=8, decimal_places=2, default=0)
    days_in_stock = models.PositiveIntegerField(_('days in stock'), default=0)
    
    # Timestamps
    created_at = models.DateTimeField(_('created at'), auto_now_add=True)
    updated_at = models.DateTimeField(_('updated at'), auto_now=True)
    last_calculated = models.DateTimeField(_('last calculated'), auto_now=True)
    
    class Meta:
        verbose_name = _('Product Analytics')
        verbose_name_plural = _('Product Analytics')
        db_table = 'product_analytics'
    
    def __str__(self):
        return f"Analytics for {self.product.name}"


class CustomerAnalytics(models.Model):
    """
    Analytics de clientes.
    """
    user = models.OneToOneField(
        'users.User',
        on_delete=models.CASCADE,
        related_name='analytics',
        verbose_name=_('user')
    )
    
    # Métricas de actividad
    total_orders = models.PositiveIntegerField(_('total orders'), default=0)
    total_spent = models.DecimalField(_('total spent'), max_digits=12, decimal_places=2, default=0)
    average_order_value = models.DecimalField(_('average order value'), max_digits=10, decimal_places=2, default=0)
    
    # Métricas de frecuencia
    days_since_last_order = models.PositiveIntegerField(_('days since last order'), null=True, blank=True)
    days_since_registration = models.PositiveIntegerField(_('days since registration'), default=0)
    order_frequency = models.DecimalField(_('order frequency'), max_digits=8, decimal_places=2, default=0)
    
    # Métricas de comportamiento
    total_products_viewed = models.PositiveIntegerField(_('total products viewed'), default=0)
    total_cart_abandonments = models.PositiveIntegerField(_('total cart abandonments'), default=0)
    total_wishlist_items = models.PositiveIntegerField(_('total wishlist items'), default=0)
    
    # Métricas de satisfacción
    total_reviews = models.PositiveIntegerField(_('total reviews'), default=0)
    average_rating_given = models.DecimalField(_('average rating given'), max_digits=3, decimal_places=2, default=0)
    
    # Segmentación
    customer_segment = models.CharField(_('customer segment'), max_length=50, blank=True)
    lifetime_value = models.DecimalField(_('lifetime value'), max_digits=12, decimal_places=2, default=0)
    
    # Timestamps
    created_at = models.DateTimeField(_('created at'), auto_now_add=True)
    updated_at = models.DateTimeField(_('updated at'), auto_now=True)
    last_calculated = models.DateTimeField(_('last calculated'), auto_now=True)
    
    class Meta:
        verbose_name = _('Customer Analytics')
        verbose_name_plural = _('Customer Analytics')
        db_table = 'customer_analytics'
    
    def __str__(self):
        return f"Analytics for {self.user.full_name}"


class WebsiteAnalytics(models.Model):
    """
    Analytics generales del sitio web.
    """
    date = models.DateField(_('date'), unique=True)
    
    # Métricas de tráfico
    total_visitors = models.PositiveIntegerField(_('total visitors'), default=0)
    unique_visitors = models.PositiveIntegerField(_('unique visitors'), default=0)
    page_views = models.PositiveIntegerField(_('page views'), default=0)
    bounce_rate = models.DecimalField(_('bounce rate'), max_digits=5, decimal_places=2, default=0)
    average_session_duration = models.DurationField(_('average session duration'), null=True, blank=True)
    
    # Métricas de conversión
    total_sessions = models.PositiveIntegerField(_('total sessions'), default=0)
    conversion_rate = models.DecimalField(_('conversion rate'), max_digits=5, decimal_places=2, default=0)
    cart_abandonment_rate = models.DecimalField(_('cart abandonment rate'), max_digits=5, decimal_places=2, default=0)
    
    # Métricas de ventas
    total_orders = models.PositiveIntegerField(_('total orders'), default=0)
    total_revenue = models.DecimalField(_('total revenue'), max_digits=12, decimal_places=2, default=0)
    average_order_value = models.DecimalField(_('average order value'), max_digits=10, decimal_places=2, default=0)
    
    # Métricas de productos
    products_viewed = models.PositiveIntegerField(_('products viewed'), default=0)
    products_added_to_cart = models.PositiveIntegerField(_('products added to cart'), default=0)
    
    # Métricas de usuarios
    new_registrations = models.PositiveIntegerField(_('new registrations'), default=0)
    returning_users = models.PositiveIntegerField(_('returning users'), default=0)
    
    # Timestamps
    created_at = models.DateTimeField(_('created at'), auto_now_add=True)
    updated_at = models.DateTimeField(_('updated at'), auto_now=True)
    
    class Meta:
        verbose_name = _('Website Analytics')
        verbose_name_plural = _('Website Analytics')
        db_table = 'website_analytics'
        ordering = ['-date']
    
    def __str__(self):
        return f"Analytics for {self.date}"


class DashboardWidget(models.Model):
    """
    Widgets personalizables para el dashboard.
    """
    WIDGET_TYPES = [
        ('chart', _('Chart')),
        ('metric', _('Metric')),
        ('table', _('Table')),
        ('list', _('List')),
    ]
    
    CHART_TYPES = [
        ('line', _('Line Chart')),
        ('bar', _('Bar Chart')),
        ('pie', _('Pie Chart')),
        ('area', _('Area Chart')),
        ('doughnut', _('Doughnut Chart')),
    ]
    
    name = models.CharField(_('name'), max_length=100)
    type = models.CharField(_('type'), max_length=20, choices=WIDGET_TYPES)
    chart_type = models.CharField(_('chart type'), max_length=20, choices=CHART_TYPES, blank=True)
    
    # Configuración del widget
    title = models.CharField(_('title'), max_length=200)
    description = models.TextField(_('description'), blank=True)
    query = models.TextField(_('query'), help_text=_('Query or configuration for the widget'))
    
    # Posición y tamaño
    position_x = models.PositiveIntegerField(_('position x'), default=0)
    position_y = models.PositiveIntegerField(_('position y'), default=0)
    width = models.PositiveIntegerField(_('width'), default=4)
    height = models.PositiveIntegerField(_('height'), default=3)
    
    # Configuración
    is_active = models.BooleanField(_('is active'), default=True)
    refresh_interval = models.PositiveIntegerField(_('refresh interval'), default=300, help_text=_('Seconds'))
    
    # Timestamps
    created_at = models.DateTimeField(_('created at'), auto_now_add=True)
    updated_at = models.DateTimeField(_('updated at'), auto_now=True)
    
    class Meta:
        verbose_name = _('Dashboard Widget')
        verbose_name_plural = _('Dashboard Widgets')
        db_table = 'dashboard_widgets'
        ordering = ['position_y', 'position_x']
    
    def __str__(self):
        return self.name
